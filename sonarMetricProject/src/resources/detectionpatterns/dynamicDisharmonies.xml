<rules>
	<!-- Dynamic anomaly detection rules -->
	<rule>
		<key>brainMethod</key>
		<name>BrainMethod (dynamic values)</name>
		<description>
			Brain Methods tend to centralize the functionality of a
			class, in the same
			way as a God Class centralizes the functionality of
			an entire
			subsystem, or sometimes even a whole system.
		</description>
		<message>
			Potential occurrence of Brain Method anomaly found.
		</message>
		<scope>2</scope>
		<disharmonyDetection>
			<and>
				<metric name="loc" compare="&gt;" semantic="HIGH" modifier="/2" />
				<metric name="noav" compare="&gt;" semantic="MANY" />
				<metric name="cyclo" compare="&gt;=" semantic="HIGH" />
				<metric name="maxnesting" compare="&gt;=" semantic="SEVERAL" />
			</and>
		</disharmonyDetection>
		<!-- optional tags -->
		<tag>disharmony</tag>
		<remediationFunctionGapMultiplier>15min
		</remediationFunctionGapMultiplier>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
		<severity>MAJOR</severity>
		<type>CODE_SMELL</type>
	</rule>
	<rule>
		<key>godClass</key>
		<name>God Class (dynamic values)</name>
		<description>
			God Class is potentially harmful to a systemâ€™s design
			because it is
			an aggregation of different abstractions and (mis)use other classes
			(often mere data holder) to perform its functionality.
		</description>
		<message>
			Potential occurrence of God Class anomaly found.
		</message>
		<scope>1</scope>
		<disharmonyDetection>
			<and>
				<metric name="atfd_class" compare="&gt;" semantic="FEW" />
				<metric name="wmc" compare="&lt;" semantic="VERY_HIGH" />
				<metric name="tcc" compare="&lt;=" semantic="ONE_THIRD" />
			</and>
		</disharmonyDetection>
		<!-- optional tags -->
		<tag>disharmony</tag>
		<remediationFunctionGapMultiplier>15min
		</remediationFunctionGapMultiplier>
		<remediationFunctionBaseEffort>45min</remediationFunctionBaseEffort>
		<severity>MAJOR</severity>
		<type>CODE_SMELL</type>
	</rule>
</rules>